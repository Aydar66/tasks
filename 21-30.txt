-------------------------------------------------------
Задача №21

-- Задача 1 SQL
with clients as 
    (select
        client_id,
        category
    from table
    group by client, category
    having count(*) = (select count(distinct category) from table)),
    cat_client_value as (
    select
        t.client_id,
        t.category,
        sum(t.value) as cat_value
    from table t
    join clients cl on cl.client_id = t.client_id
    group by 1, 2)
select 
    client_id,
    category,
    cat_value * 100.0 / sum(cat_value) over(partition by client_id) as share
from cat_client_value

-- Задача 3 Python
def even_odd(limit):

    for num in range(0, limit + 1):
        ans = 'четное' if num % 2 == 0 else 'нечетное'
        print(num, ans)


-------------------------------------------------------
Задача №22

-- Задача 1 SQL
with t as (
    select
        *,
        dense_rank() over(order by col desc) as rnk
    from table)
select
    col
fromt 
where rnk = 2

-- Задача 2 SQL
select
    f.client_id
from fct_sales f
join dim_sku d
on f.sku_id = d.sku_id
where f.dttm >= current_timestamp - interval '30 days'
group by f.client_id
having sum(f.sku_cnt * d.weight) > 2

-- Задача 3 SQL
select
    f.client_id,
    f.dttm, 
    sum(f.sku_cnt * d.price) over(partition by f.client_id order by f.dttm) as cumsum
from fct_sales f
join dim_sku d
on f.sku_id = d.sku_id
order by f.client_id, f.dttm

-- Задача 4 PYTHON
data = { 'product_id': [101, 102, 101, 103, 102, 101, 103]
'store_id': [1, 1, 2, 1, 2, 2, 1]
'sales': [5, 3, 9, 7, 2, 4, 8] }
df = pd.DataFrame(data)
Для каждого магазина найдите сумму, среднее значение и максимальные продаж по каждому продукту.

df.groupby(['store_id', 'product_id']).agg(totalamount = ('sales', 'sum'), avg_amount = ('sales', 'mean'), max_amount = ('sales', 'max'))
df.groupby(['store_id', 'product_id']).agg({'sales': ['sum', 'mean', 'max']})

-- Задача 5 PYTHON
df['new_col'] = np.where(df['store_id']%2==0, 'четное', 'нечетное')

df['new_col'] = df['store_id'].apply(lambda x: 'четное' if x%2 == 0 else 'нечетное')


-------------------------------------------------------
Задача №23

-- Задача 1 SQL
select
    id,
    name
from employee
where salary = (select max(salary) from employee)

-- Задача 2 (Python/Pandas)
df.loc['Region'=='USA'].groupby('Device').agg({'User_id' : ['count', 'nunique']})

-- Задача 3 PYTHON
def f(s):
    current = ''
    counter = 0
    max = 0
    ans = ''

    for letter in s+'%':
        if letter == current:
            counter += 1
        else:
            if counter > max:
                max = counter
                ans = current
            counter = 1
            current = letter


    return ans, max
            

-------------------------------------------------------
Задача №24

-- PYTHON
-- Есть два столбца А и Б в датафрейме - сделать столбец С как среднее значение А и Б
df['C'] = df.mean(axis=1)

-- Как удалить строки с пропущенными значениями?
df.dropna(inplace=True)

-- Написать функцию по возведению в степень и применить ее к столбцу
def f(cell, degree):
    cell = cell**degree
    return cell

df['col'] = df['col'].apply(lambda x: f(x, 2))

-- SQL
employee
| FIO | salary | age

with t as 
    (select
        FIO,
        salary,
        age,
        dense_rank() over(order by salary DESC) as salary_rnk
    from employee),
    t2 as (
    select
        FIO,
        salary,
        age,
        dense_rank() over (order by age) as age_rnk
    from t
    where salary_rnk = 2)
select
    FIO,
    salary,
    age
from t2
where age_rnk = 1



-------------------------------------------------------
-- Задача 25

-- Задача 1 SQL
select
    user_id
from (
    select
        user_id,
        date_trunc('month', order_date) as month
    from orders
    group by user_id, date_trunc('month', order_date)
    ) t
group by user_id
having count(*) = 6

-- Задача 2 SQL
select
    t.name,
    dense_rank() over(order by p.amount desc) as rnk
from points p
join team t
on t.id = p.team_id
order by p.amount desc

-- без оконки и сортировки
1 - 10 - 30
1 - 10 - 20
2 - 30 - null
3 - 20 - 30
3 - 20 - 20


select
    t.name,
    count(p2.points) + 1 
from points p1
join team t on t.id = p1.team_id
left join points p2
on p2.points > p1.points
group by 1

-- Задача 3 PYTHON
def anagram(s1, s2):
    from collections import Counter
    
    letters = dict(Counter(s2))
    
    
    for letter in s2:
        
        try:
            letters[letter] -= 1
        except:
            return False
        
    for value in letters.value():
        if value != 0:
            return False
    
    return True


-------------------------------------------------------
-- Задача 26

-- Задача 1 SQL
select
    d.name,
    e.name
from department d
join employee e
on e.department_id = d.id
group by d.name
having e.id = (select max(id) from employee e join department d on d.id = e.department_id)

-- Задача 2 SQL
with t as
    (select
        d.name,
        d.id
    from department d
    join employee e
    on e.department_id = d.id
    where e.name ilike "%z%" and e.name ilike "%w%")
select distinct
    d.name
from department d
left join t
on d.id = t.id
where t.id is null

-- Задача 3 SQL
-- Вопрос по решению: условие rn=1 из нескольких сотрудников с одинаковой зп
-- оставляет только одного, но по условию задачи нужно вывести имя следующего по зп для каждого сотрудника
select
    name,
    lead(name) over(partition by department_id order by salary asc, id desc) as next_name,
    lead(salary) over(partition by department_id order by salary asc, id desc) as next_salary
from employee
order by department_id, salary

-- Задача 4 SQL
with salary_per_dep as (
    select
        d.name,
        sum(e.salary) as total_salary
    from department d
    join employee e
    on e.department_id = d.id
    group by d.name)
select
    name,
    total_salary,
    sum(total_salary) over(order by total_salary) as cum_total_salary
from salary_per_dep
order by total_salary


-------------------------------------------------------
Задача 27

-- Задача 1 SQL
select
    p.prod_cat,
    sum(s.price * s.cnt) as total_amt
from product p
left join sale s
on p.product_nm = s.product_nm
group by p.prod_cat

-- Задача 2 SQL
with t as (
    select
        s.customer_id,
        count(distinct product_category) as cat_cnt
    from sales s
    join products p
    on s.product_id = p.product_id
    group by s.customer_id)
select
    customer_id
from t
having cat_cnt = (select count(distinct product_category) from products)


-------------------------------------------------------
Задача 28

-- Задача 1 SQL
with cum_orders as (
    select
        pr.name,
        count(distinct o.order_id) as orders_amount
    from programs pr
    left join orders o
    on o.program_id = pr.id
    where o.order_date::date - current_date <= interval '30 days'
    group by pr.name),
    rnk_date as (
    select
        pr.name,
        dense_rank() over(order by orders_amount desc) as rnk
    from cum_orders)
select
    pr.name
from rnk_date
where rnk <= 5

-- Задача 2 SQL
    select
        pr.name,
        sum(o.order_sum) as revenue
    from programs pr
    left join orders o
    on o.program_id = pr.id
    group by pr.name

-- Задача 3 SQL

select
    pr.name
from programs pr
left join orders o
on pr.id = o.program_id
where pr.direction = 'Аналитика'
and date_trunc('quarter', o.buy_date) = '2021-10-01'
group by pr.name
having sum(o.order_sum) >= 1000000

-- Задача 4 SQL
with ranked as (
    select
        o.customer_id
        first_value(p.name) over(partition by o.customer_id order by o.buy_date) as first_program
    from orders o
    join programs p
    on p.id = o.program_id
    where buy_date is not null)
select distinct
    customer_id,
    first_program
from ranked

-- Задача 5 SQL
with ranked as (
    select
        o.customer_id,
        p.name,
        row_number() over(partition by customer_id order by buy_date) as rnk
    from orders o
    join programs p
    on p.id = o.program_id
    where buy_date is not null)
select
    customer_id,
    name
from ranked
where rnk = 3

-- Задача 6 SQL
with ranked as (
    select
        o.customer_id,
        p.name,
        row_number() over(partition by customer_id order by buy_date) as rnk
    from orders o
    join programs p
    on p.id = o.program_id
    where buy_date is not null),
    temp as (
    select
        r1.customer_id,
        r1.name as first_purchase,
        r2.name as third_purchase
    from ranked r1
    left join ranked r2
    on r1.customer_id = r2.customer_id
    and r2.rnk = 3)
select
    customer_id,
    case
        when third_purchase is NULL then first_purchase
        else third_purchase
    end as name
f temp

-- PYTHON
def f(d):
    for key, value in d.items():
        print(f'{key}: {item}')


-------------------------------------------------------
Задача 30

-- Задача 1 SQL
select
    group_id,
    sum(rub),
    sum(qty),
    count(distinct receipt_id)
from table
group by group_id

-- Задача 2 SQL
| sale_date | receipt_id | group_id | rub | qty
select
    sale_date,
    receipt_id,
    group_id,
    rub,
    qty
from offline
union all
select
    date_complete,
    order_id,
    group_id,
    rub,
    qty
from online

-- Задача 3 SQL
select
    sale_date,
    receipt_id,
    group_id,
    rub,
    qty
from offline
where from_online != 1
union all
select
    date_complete,
    order_id,
    group_id,
    rub,
    qty
from online

-- Задача 4 SQL
with online_orders as (
    select
        date_complete::date as date,
        group_id,
        tag, 
        sum(rub) rub_online,
        sum(qty) qty_online
    from online
    group by date_complete::date, group_id, tag),
    offline_orders as (
    select
        sale_date as date,
        group_id,
        tag,
        sum(rub) rub_offline,
        sum(qty) qty_offline
    from offline
    where from_online = 0
    group by sale_date, group_id, tag),
    final as (
    select
        coalesce(off.date, onl.date) as date,
        coalesce(off.tag, onl.tag) as tag,
        coalesce(off.group_id, onl.group_id) as group_id,
        rub_offline,
        qty_offline,
        rub_online,
        qty_online
    from online_orders onl
    full join offline_orders off
    on onl.group_id = off.group_id and
    onl.tag = off.tag and
    onl.date = off.date)
select
    *,
    max(rub_offline) over(partition by group_id) as max_rubl_off
from final

-- Задача 5 PYTHON
df_offline = offline.groupby(['sale_date', 'tag', 'group_id']).agg(rub_offline = ('rub', 'sum'), qty_offline=('qty', 'sum')).reset_index()
df_offline.rename(columns={'sale_date': 'date'}, inplace=True)

online['date_complete'] = online['date_complete'].dt.date
df_online = online.groupby(['date_complete', 'tag', 'group_id']).agg(rub_online = ('rub', 'sum'), qty_online=('qty', 'sum')).reset_index()
df_online.rename(columns={'date_complete': 'date'}, inplace=True)

df = pd.merge(df_online,
              df_offline,
              left_on='date',
              right_on=['date', 'group_id', 'tag'], 
              how='outer',
              suffixes=['on', 'off'])

df['date'] = df['date_on'].combine_first(df['date_off'])
df['group_id'] = df['group_id_on'].combine_first(df['group_id_off'])
df['tag'] = df['tag_on'].combine_first(df['tag_off'])

df.drop(columns=['date_on', 'date_off', 'group_id_off', 'group_id_on', 'tag_on', 'tag_off'],
        inplace=True)

df['max_rubl_off'] = df.groupby('group_id')['rub_offline'].transform('max')

df['average_price'] = df.apply(lambda x: (x['rub_offline'] / x['qty_offline'] + x['rub_online'] / x['qty_online'])/2, axis=1)
